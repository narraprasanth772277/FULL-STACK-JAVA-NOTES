Working with properties file
============================
In regular intervals, our DBA will change username and password for security reason.

It is never recommanded to pass database properties directly to the application.

It is always recommanded to read database properties from properties file.

Properties file contains key and value pair.


dbdetails.properties 
--------------------
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE 
username=system
password=admin 


PropertiesFileApp.java
---------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception  
	{
		//locate a properties file 
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create Properties class object
		Properties p=new Properties();
		
		//load the data from file to class
		p.load(fis);
		
		//read the data from Properties class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		//reading the data from student table
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	
	}
}


Thin-Client/Fat-Server application
===================================
Diagram: jdbc7.1

Every JDBC application is a thin-client/fat-server application.

To develop thin-client/fat-server application we need to place business logic and persistence logic in database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we need to use CallableStatement object.


PL/SQL procedure
=================
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
is
begin
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		//create callable stmt object
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter 
		cst.registerOutParameter(3,Types.INTEGER);
		
		//set the values to IN parameter
		cst.setInt(1, 100);
		cst.setInt(2, 20);
		
		//execute the procedure
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		System.out.println("Sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}

Q)Write a jdbc application to create a student table ?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

public class CreateTableApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="create table student(sno number(3),sname varchar2(10),sadd varchar2(12))";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//execute the qry
		ps.executeUpdate();
		
		System.out.println("Table Created");
		
		ps.close();
		con.close();
	}
}





































































	 
