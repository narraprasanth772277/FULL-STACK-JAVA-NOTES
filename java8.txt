2)static variable
==================
A value of a variable which is not varied from object to object is called static variable.

Static variable will be created at the time of classloading and it will destroy at the time of class unloading .Hence scope of static variable is same as scope of .class file.

Static variable will store in method area.

Static variable must and should declare immediately after the class using static keyword but not inside methods,blocks and constructors.

Static variable can access directly from instance area and static area.

Static variable can access by using object reference and classname.

ex:
-----
class Test
{
	//static variable 
	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);//10	

		Test t=new Test();
		System.out.println(t.i);//10

		System.out.println(Test.i);//10
	}
}

if we won't initialize any value to static variable then JVM will intialized default values.

ex:
----
class Test
{
	//static variable 
	static String s;

	public static void main(String[] args)
	{
		System.out.println(s);//null
	}
}

ex:
----
class Test
{
	public static void main(String[] args)
	{
		m1();

		Test t=new Test();
		t.m1();

		Test.m1();
	}
	public static void m1()
	{
		System.out.println("static-method");
	}
}

3)Local variables
=================
To meet temperory requirements a programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

Local variable will be created at the time of execution blocks and it will destroy when execution block is executed.Hence scope of local variable is same as execution block where it is declared.

Local variables will store in Java stack memory.

ex:
----
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		int i=10;
		System.out.println(i);
	}
	
}

Note:
-----
If we won't initialize any value local variable then JVM will not initialized any default value.
ex:

class Test
{
	public static void main(String[] args)
	{
		//local variable 
		int i;
		System.out.println(i);
	}
	
}
o/p:
	C.T.E variable i might not have been initialized

A local variable will accept only final modifier.

ex:
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;
		System.out.println(i);//10
	}
	
}

ex:
----
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;
		i=20;
		i=30;
		System.out.println(i);//C.T.E 
	}
	
}
Note:
	We can't assign any value to final variable.

Main method
===========
Our program contains main method or not.Either it is properly declare or not. It is not a responsibility of a compiler to check. It is a liability of a JVM to look for main method always at runtime.If JVM won't find main method then it will throw one runtime error called main method not found.

JVM always look for main method with following signature.

ex:
	public  static  void  main(String[] args) 

If we perform any changes in above signature then we will get runtime error called main method not found.

public
-------
JVM wants to call this method from anywhere.

static
------
JVM wants to call this method without using object reference.

void
-----
Main method does not return any value to JVM.

main
----
It is an identifier given to main method.

String[] args
------------
It is known as command line arguments.

We can perform following changes in main method.

1)Order of modifier is not important , incase of public static we can declare static public also.
	ex
		static public void main(String[] args)

2)We can change String[] in following acceptable formats.
	ex:
		public static void main(String[] args)
		public static void main(String   []args)
		public static void main(String args[])

3)We can replace String[] with var-arg parameter.
 	ex:
		public static void main(String... args)

4)We can change args with any java valid identifier.
	ex:
		public static void main(String[] ihub)

5)Main method will accept following modifiers.
  ex:
		synchronized 
		strictfp
		final 


Command line arguments
========================
Arguments which are passing through command prompt such type of arguments are called command line arguments.

In command line argument we need to pass our input values at runtime command.

ex:
	javac   Test.java 
		
	java    Test  101  raja  M  1000.0
			|   |	 |   |_____args[3]
			|   |	 |_________args[2]
			|   |______________args[1]
			|__________________args[0]

ex:
class Test
{
	public static void main(String[] args)
	{
		System.out.println(args[0]);
		System.out.println(args[1]);
		System.out.println(args[2]);
		System.out.println(args[3]);		
	}
}

Q)Write a java program to accept one input and display it ?

class Test
{
	public static void main(String[] args)
	{
		String name=args[0];
		System.out.println("Welcome :"+name);	
	}
}
javac  Test.java

java  Test  ElonMusk 


System.out.println()
=======================
It is a output statement in java.

Whenever we want to display any data or userdefined statements then we need to use System.out.println().

syntax:
		static variable 
		|
	System.out.println() 
	|		|
	predefined	predefined method.
	final 
	class 


Diagram: java8.1















	  































































	






























