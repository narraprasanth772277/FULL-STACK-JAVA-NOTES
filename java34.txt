Map
=====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in key,value pair then we need to use Map interface.

A key can't be duplicated but value can be duplicated.

Both key and value must be objects.

Each key and value pair is known as one entry.

Diagram: java34.1


HashMap
=======
The underlying data structure is Hashtable.

Duplicate keys are not allowed but value can be duplicated.

Insertion order is not preserved because it will take hash code of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for key and value.

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put("one","raja");
		hm.put("nine","jose");
		hm.put("six","nelson");
		hm.put("four","Alex");
		System.out.println(hm);//{nine=jose, six=nelson, four=Alex, one=raja}
		hm.put("one","rani");
		System.out.println(hm);//{nine=jose, six=nelson, four=Alex, one=rani}
		hm.put(null,null);
		System.out.println(hm);//{null=null, nine=jose, six=nelson, four=Alex, one=rani}
		hm.put(1,100);
		System.out.println(hm);//{null=null, nine=jose, 1=100, six=nelson, four=Alex, one=rani}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();
		hm.put("one","raja");
		hm.put("nine","jose");
		hm.put("six","nelson");
		hm.put("four","Alex");

		Set s=hm.keySet();
		System.out.println(s);//[nine, six, four, one]

		Collection c=hm.values();
		System.out.println(c);//[jose, nelson, Alex, raja]

		Set s1=hm.entrySet();
		System.out.println(s1);//[nine=jose, six=nelson, four=Alex, one=raja]
		
	}
}

LinkedHashMap
==============
It is a child class of HashMap class.

LinkedHashMap is exactly same as HashMap class with following differences.

HashMap					LinkedHashMap
----------				---------------
The underlying data structure is 	The underlying data structure is 
Hashtable.				Hashtable and LinkedList.

Insertion order is not preserved.	Insertion order is preserved.

It is introduced in 1.2v.		It is introduced in 1.4v.

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap<String,String> lhm=new LinkedHashMap<String,String>();
		lhm.put("one","raja");
		lhm.put("nine","jose");
		lhm.put("six","nelson");
		lhm.put("four","Alex");
		System.out.println(lhm);//{one=raja,nine=jose,six=nelson,four=Alex}
	}
}

TreeMap 
========
The underlying data structure is RED BLACK TREE.

Duplicate keys are not allowed but values can be duplicated.

Insertion order is not preserved because it will take sorting order of the key.

If we depend upon default natural sorting order then keys can be homogeneous and Comparable.

If we depend upon customized sorting order then keys can be hetrogeneous and non-comparable.

Key can't be null but value can be null.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(1,"one");
		tm.put(10,"ten");
		tm.put(5,"five");
		tm.put(3,"three");
		System.out.println(tm);//{1=one,3=three,5=five,10=ten}
		tm.put(4,null);
		System.out.println(tm);//{1=one, 3=three, 4=null, 5=five, 10=ten}
		tm.put(null,"six");
		System.out.println(tm);//R.E NullPointerException
	}
}

Hashtable
===========
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicated.

Insertion order is not preserved because it will descending order of key.

Hetrogeneous objects are allowed for both key and value.

Key and value both can't be null.

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Hashtable<Integer,String> ht=new Hashtable<Integer,String>();
		ht.put(1,"one");
		ht.put(10,"ten");
		ht.put(5,"five");
		ht.put(3,"three");
		System.out.println(ht);//{10=ten, 5=five, 3=three, 1=one}
		
		ht.put(1,"raja");
		System.out.println(ht);//{10=ten, 5=five, 3=three, 1=raja}

		//ht.put(4,null);
		//System.out.println(ht);//R.E NullPointerException

		ht.put(null,"four");
		System.out.println(ht);//R.E NullPointerException
		
	}
}


Types of Cursors 
==================
Cursor is used to read objects one by one from Collections.

We have three types of cursors in java.

1) Enumeration

2) Iterator 

3) ListIterator 

1) Enumeration
--------------
It is used to read objects one by one from legal Collection objects.

We can create Enumeration object as follow.
ex:
	Enumeration e=v.elements();

Enumeration interface contains following two methods.
ex:
	public boolean void hasMoreElements()
	public Object next nextElement()

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		
		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
			Integer i=(Integer)e.nextElement();
			System.out.println(i);
		}
	}
}
Limitations with Enumeration
--------------------------
Using Enumeration we can read objects one by one , only from legacy Collection objects.Hence it is not a universal cursor.

Using Enumeration interface we can perform read operation but not remove operation.

To overcome this limitation sun micro system introduced Iterator.



2)Iterator
==========
Iterator interface is used to read object one by one from any Collection objects.Hence it is a universal cursor.

Using iterator interface we can perform read and remove operations.

We can create Iterator object as follow.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.
ex:
	public boolean hasNext()
	public Object next()
	public void remove() 

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		System.out.println(al);//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		
		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
				itr.remove();
			else
				System.out.println(i);
		}

		System.out.println(al);//1 3 5 7 9
	}
}

Limitations with Iterator 
------------------------
> Using Enumeration and Iterator interface we can read objects only in forward direction but not in backward direction.Hence they are not bi-directional cursors.

> Using Iterator interface we can perform read and remove operation but not adding and replacement of new objects.

>To overcome this limitation sun micro system introduced ListIterator.

3)ListIterator
---------------
ListIterator interface is used to read objects one by one ,only from List Collection objects.

Using ListIterator object we can perform read, remove , adding and replacement of new objects.

We can create ListIterator object as follow.
ex:
	ListIterator litr=al.listIterator();

ListIterator interface contains following 9 methods.
ex:
	public boolean hasNext()
	public Object next()
	public boolean hasPrevious()
	public Object previous()
	public void remove();
	public void nextIndex()
	public void previousIndex()
	public void set(Object o)
	public void add(Object o)
	
ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			System.out.println(s);
		}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.remove();
			}
		}

		System.out.println(al);//[nag,chiru,venki]
	}
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.add("chetaniya");
			}
		}

		System.out.println(al);//[bala, nag, chetaniya, chiru, venki]
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]

		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.set("chetaniya");
			}
		}

		System.out.println(al);//[bala, chetaniya, chiru, venki]
	}
}

Interview Questions
===================
Q)Write a java program to find out number of words present in a string?

input:
	This is is java java class 

output:
	This=1,is=2,java=2,class=1

ex:
---

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="This is is java java class";

		LinkedHashMap<String,Integer> lhm=new LinkedHashMap<String,Integer>();

		String[] sarr=str.split(" ");

		//for each loop
		for(String s:sarr)
		{
			if(lhm.get(s)!=null)
			{
				lhm.put(s,lhm.get(s)+1);
			}
			else
			{
				lhm.put(s,1);
			}
		}

		System.out.println(lhm);
	}
}
Q)Write a java program to find out number of alphabets present in a string?

input:
	java 

output:
	j=1,a=2,v=1

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="java";

		LinkedHashMap<Character,Integer> lhm=new LinkedHashMap<Character,Integer>();

		char[] carr=str.toCharArray();

		//for each loop
		for(char c:carr)
		{
			if(lhm.get(c)!=null)
			{
				lhm.put(c,lhm.get(c)+1);
			}
			else
			{
				lhm.put(c,1);
			}
		}

		System.out.println(lhm);
	}
}

Q)Write a java program to display given string is balanced or not?
input:
	{([])}

output:
	It is a balanced string 


ex:


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="{([])}";

		//caller method 
		if(isBalanced(str))
			System.out.println("It is balanced string");
		else
			System.out.println("It is not balanced string");
	}
	//callie method
	public static boolean isBalanced(String str)
	{
		Stack<Character> stack=new Stack<Character>();

		char[] carr=str.toCharArray();

		//for each loop
		for(char c:carr)  // ] ) }  
		{
			if(c=='{' || c=='(' || c=='[')
			{
				stack.push(c);
			}
			else if(c=='}' && !stack.isEmpty() && stack.peek()=='{')
			{
				stack.pop();
			}
			else if(c==')' && !stack.isEmpty() && stack.peek()=='(')
			{
				stack.pop();
			}
			else if(c==']' && !stack.isEmpty() && stack.peek()=='[')
			{
				stack.pop();
			}
			else
			{
				return false;
			}

		}

		return stack.isEmpty();
	}
}













































 

























































































































