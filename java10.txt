Q)Write a java program to convert CGPA to Percentage? 

import java.util.Scanner;
class Example8
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the CGPA :");
		float cgpa=sc.nextFloat();

		float percentage=cgpa*9.5f;

		System.out.println("CGPA to percentage is ="+percentage);
	}
}

Q)Write a java program to perform swapping of two numbers?

import java.util.Scanner;
class Example9
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();//10

		System.out.println("Enter the second number :");
		int b=sc.nextInt();//20 

		System.out.println("Before swapping a ="+a+" and b="+b);
		
		//swapping 
		int temp=a;
		a=b;
		b=temp;

		System.out.println("After swapping a="+a+" and b="+b);

	}
}

Q)Write a java program to perform swapping of two numbers without using third variable ?


import java.util.Scanner;
class Example10
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first number :");
		int a=sc.nextInt();//10

		System.out.println("Enter the second number :");
		int b=sc.nextInt();//20 

		System.out.println("Before swapping a ="+a+" and b="+b);
		
		//swapping logic
		a=a+b;
		b=a-b;
		a=a-b;
		

		System.out.println("After swapping a="+a+" and b="+b);

	}
}

Typecasting
==============
The process of converting from one datatype to another datatype is called typecasting.

In java , typecasting can be performed in two ways.

1)Implicit typecasting 

2)Explicit typecasting 

1)Implicit typecasting 
---------------------
If we want to store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as Widening or Upcasting.

We can perform implicit typecasting as follow.

ex:

	byte --->short
			---->
				int  --> long ---> float ---> double
			---->
		char 


ex:
----
class Test 
{
	public static void main(String[] args) 
	{		
		byte b=10;
		int i=b;
		System.out.println(i); //10
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{		
		char ch='a';

		float f=ch;

		System.out.println(f); // 97.0
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{		
		int i=10;

		double d=i;

		System.out.println(d); // 10.0
	}
}

2)Explicit typecasting 
---------------------
If we want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also know as Narrowing or Downcasting.

We can perform explicit typcasting as follow.
ex:

	byte <---short
			<----
				int  <-- long <--- float <--- double
			<----
		char 

ex:


class Test 
{
	public static void main(String[] args) 
	{	
		float f=10.56f;

		int i=(int)f;

		System.out.println(i);//10

	}
}

ex:
----
class Test 
{
	public static void main(String[] args) 
	{	
		int i=65;

		char ch=(char)i;

		System.out.println(ch); //A 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{	
		int i=130;

		byte b=(byte)i;

		System.out.println(b);//-126
	}
}

Types of blocks in java
========================
A block is a set of statement which is enclosed in a curly braces i.e {}.

In Java , We have three types of blocks.

1)Instance block 

2)Static block 

3)Local block 

1)Instance block 
------------------
Instance block is used to initialize the values to instance variables.

Instance block will execute when we create an object.

We can declare instance block as follow.

syntax:
	//instance block
	{
		-
		- // set of statements 
		-
	}

ex:
----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{	
		System.out.println("main-method");
	}
}

ex:
---
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{	
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method 
	instance-block


ex:
------
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args) 
	{	
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}

o/p:
	instance-block
	main-method 
	instance-block

ex:
---
class Test 
{
	//instance variable
	int i;

	//instance block
	{
		i=100;
	}
	public static void main(String[] args) 
	{	
		Test t=new Test();
		
		System.out.println(t.i);
	}
}

2)Static block 
----------------
A static block is used to initialize the value to static variable.

A static block will execute at the time of classloading.

We can declare static block as follow.

syntax:
	//static block
	static
	{
		-
		- //set of statements 
		-
	}


ex:
----
class Test 
{
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{	
		System.out.println("main-method");
	}
}

o/p:
	static-block
	main-method

ex:
-----
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	//static block
	static
	{
		System.out.println("static-block");
	}

	public static void main(String[] args) 
	{	
		Test t=new Test();
		System.out.println("main-method");
	}
}
o/p:
	static-block
	instance-block
	main-method

ex:
----
class Test 
{
	//static variable
	static int i;

	//static block
	static
	{
		i=200;
	}

	public static void main(String[] args) 
	{	
		System.out.println(i);//200
	}
}


3)Local block
--------------
A local block is used to initialize the local variables.

A local block will execute just like normal statement.

We can declare local block as follow.

syntax:
	//local block 
	{
		-
		- //set of stmt 
		-	
	}

ex:
----
public class Test 
{
	public static void main(String[] args) 
	{	
		System.out.println("stmt1");
		//local block
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}
o/p:
stmt1
stmt2
stmt3

ex:
-----
class Test 
{
	public static void main(String[] args) 
	{	
		//local variable
		int i;

		//local block
		{
			i=300;
		}

		System.out.println(i);
	}
}


Java Source File structure
==========================
case1:
------
	A java program can have multiple classes.

case2:
------
	If a java program contains multiple classes then we need to 
	check which class contains main method and that class will consider
	as main class.
	ex:
		A.java
		----------
		class A 
		{
			public static void main(String[] args)
			{
				-	
			}
		}
		class B 
		{
			-	
		}

case3:
------
	If a java program contains multiple classes with main method 
	then we need to declare atleast one class as public and that
	class will treated as main class.

A.java
-------
public class A 
{
	public static void main(String[] args) 
	{	
		System.out.println("A-class");
	}
}
class B 
{
	public static void main(String[] args) 
	{	
		System.out.println("B-class");
	}
}
class C 
{
	public static void main(String[] args) 
	{	
		System.out.println("C-class");
	}
}

o/p:
	javac  A.java (Here three .class files will be created)

	java  A 
	java  B
 	java  C  

Assignments
===========
Q)Write a java program to area of a triangle?

Q)Write a java program to accept six marks of a student then find out 
  total and  average?

Q)Write a java program to find out area of a rectangle?


























































































































































































	
















































































































