Abstract class
==============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A "abstract" keyword is applicable for methods and classes but not for variables.

It is not possible to create object for abstract class.

To write the implementation of abstract methods we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
	abstract class <class_name>
	{
		-
		- // abstract methods
		- // concrete methods 
		- // instance variables 
		-
	}

If we know partial implementation then we need to use abstract class.

ex:

abstract class Plan
{
	//instance variable 
	protected double rate;

	//abstract method
	public abstract void getRate();

	//concrete method
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+ units);
		System.out.println("Total Bill  :"+ rate*units);
	}
}
class DomesticPlan extends Plan
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);

		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}


Q)What is the difference between interface and abstract class?

Interface				abstract class
------------				--------------
To declare interface we will use 	To declare abstract class we will use 
interface keyword.			abstract keyword.

It is a collection of abstract methods,	It is a collection of abstract methods
static methods and default methods.	and concrete methods.

We can achieve multiple inheritance.	We can't achieve multiple inheritance.

It contains only constants.		It contains only instance variables.

If we know specification then we need 	If we know partial implementation 
to use interface.			then we need to use abstract class.

To write the implementation of abstract	To write the implementation of
methods we will use implementation 	abstract methods we will use sub 
class.					class.

It does not allow constructor.		It allows constructor.

It does not allow blocks.		It allows blocks.



Singleton class
==================
A class which allows us to create only one object is called singleton class.

Using a class if we call any method and that methods returns same class object then it is called singleton class.
ex:
	LocalDate  
	LocalTime
	Calendar
	and etc.

To create a singleton class we need to declare private constructor and factory method.

ex:
---
class Singleton
{
	static Singleton singleton=null;

	//private constructor
	private Singleton()
	{

	}
	//factory method 
	public static Singleton getInstance()
	{
		if(singleton==null)
		{
			singleton=new Singleton();
		}

		return singleton;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Singleton s1=Singleton.getInstance();
		System.out.println(s1.hashCode());


		Singleton s2=Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}

API
=====
API stands for Application Programming Interface.

It is a base for the programmers to develop software applications.

API is a collection of packages.

In java, we have three set of API's.

1)Predefined API
-------------------
Built-in API is called predefined API.
ex:
	https://docs.oracle.com/javase/8/docs/api/	

		
2)Userdefined API
----------------
API which is created by the user based on the application requirements is 
called userdefined API.


3)Third party API 
-----------------
API which is given by third party vendor is called third party API.
ex:
	javazoom API 
	iText API 
	and etc
	
Packages
========
A package is a collection of classes,interfaces, enums and annotations.

Here enum is a special class and annotation is a special interface.

In general, a package is a collection of classes and interfaces.

Package is also known as folder or a directory.

In java, we have two types of packages.

1)Predefined packages 

2)Userdefined packages 

1)Predefined packages 
----------------------
Built-In packages are called predefined packages.
ex:
	java.lang
	java.util
	java.io
	java.text
	java.time
	java.sql
	and etc.

2)Userdefined packages 
------------------------
A package which is created by the user based on the application requirement is called userdefined package.

To declare userdefined package we will use package keyword.

syntax:
	package  <package_name>;


ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test 
{
	public static void main(String[] args)
	{
		Calendar c=Calendar.getInstance();

		//Time to 24 hours
		int h=c.get(Calendar.HOUR_OF_DAY);

		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else
			System.out.println("Good Night");
	}
}

We can compile above program by using below command.
ex:
		current directory 
		       |
	javac    -d    .    Test.java 
		  |
		destination 
		folder 

We can run above program by using below command.
ex:
	java    com.ihub.www.Test 
		     |		|	
		pkg name 	classname 


Inner classes
==============
Sometimes we will declare a class inside another class such concept is called inner class.
ex:
	class Outer_Class
	{
		class Inner_Class
		{
			-
			-
		}
	}

Inner classes introduced as part of event handling to remove GUI bugs.

Due to powerful features and benefits of inner classes.Our programmers started to use inner classes in regular programming.

Inner classes do not support static members.

Accessing inner class data from static area of outer class
----------------------------------------------------------
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}

	public static void main(String[] args)
	{
		Outer.Inner i=new Outer().new Inner();	
		i.m1();
	}
}
Note:
-----
Here two .class files will be created i.e Outer.class and Outer$Inner.class.

ex:1
----
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}

	public static void main(String[] args)
	{
		Outer.Inner i=new Outer().new Inner();	
		i.m1();
	}
}

ex:2
----
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}

	public static void main(String[] args)
	{
		new Outer().new Inner().m1();
	}
}

ex:3
----
class Outer 
{
	class Inner 
	{
		public static void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}

	public static void main(String[] args)
	{
		new Outer().new Inner().m1();
	}
}
Note: 
	C.T.E : Illegal static declaration in inner class.


Accessing inner class data from non-static area of outer class
---------------------------------------------------------------
class Outer 
{
	class Inner 
	{
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}

	public void m2()
	{
		Inner i=new Inner();
		i.m1();
	}
	public static void main(String[] args)
	{
		Outer o=new Outer();
		o.m2();
	}
}

Enum
=====
Enum is a group of named constants.

Enum concept is introduced in Java 5 version.

Using enum we can created our own datatype called enumerated datatype.

When compare to old language enum, java enum is more powerful.

syntax:
	enum   type_name	
	{
		val1,val2,...,valN
	}
ex:
	enum Months
	{
		JAN,FEB,MAR
	}

Internal implementation of enum
-------------------------------
In java, enum will consider as class concept and extends with java.lang.Enum class.

Every enum constant is a reference variable of enum type.


enum Months		public final class Months extends java.lang.Enum 
{			{
	JAN,FEB,MAR ==>		public static final Months JAN=new Months();
}				public static final Months FEB=new Months();
				public static final Months MAR=new Months();
			}


Declaration and usage of enum
--------------------------------
enum Months
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months m=Months.JAN;
		System.out.println(m);
	}
}

ex:
---
enum Months
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months m=Months.FEB;
		switch(m)
		{
			case JAN: System.out.println("January"); break;
			case FEB: System.out.println("February"); break;
			case MAR: System.out.println("March"); break;
		}
	}
}











































































































