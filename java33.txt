ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		ll.add(null);
		System.out.println(ll);//[one,two,three,null]

	}
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]

		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo, one, two, three, jojo]
	
		System.out.println(ll.getFirst()); //gogo
		System.out.println(ll.getLast()); //jojo

		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]
	}
}

Vector
=======
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

All the methods present in Vector are synchronized.Hence we can achieve thread safety.

Vector contains following methods.
ex:
	addElement()
	removeElementAt()
	removeAllElements()
	firstElement()
	lastElement()
	and etc.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();

		System.out.println(v.capacity());//10

		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		System.out.println(v.firstElement()); //1 
		System.out.println(v.lastElement());  //10

		v.removeElementAt(5);
		System.out.println(v);//[1, 2, 3, 4, 5, 7, 8, 9, 10]

		v.removeAllElements();
		System.out.println(v);//[]
			
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();

		System.out.println(v.capacity());//10

		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		System.out.println(v.get(0)); //1 
		System.out.println(v.get(v.size()-1));  //10

		v.remove(5);
		System.out.println(v);//[1, 2, 3, 4, 5, 7, 8, 9, 10]

		v.clear();
		System.out.println(v);//[]
			
	}
}

Stack
=======
It is a child class of Vector class.

If we depends upon LIFO(Last In First Out) order then we need to use Stack. 

constructor
----------

	Stack  s =new Stack();

Methods
-------
1) push(Object o)
----------------
	It is used to add the elment to stack.

2) pop()
----------
	It is used to remove the element from stack.

3) peek()
---------
	It is used to return toppest element from the stack.

4) isEmpty()
--------
	It is used to check stack is empty or not.

5) Search(Object o)
---------------
	It will return offset value if element is found otherwise it will 
	return -1.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Stack<String> s=new Stack<String>();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s);//[A,B,C]

		s.pop();
		System.out.println(s);//[A,B]

		System.out.println(s.peek());//B

		System.out.println(s.isEmpty());//false

		System.out.println(s.search("Z"));//-1

		System.out.println(s.search("A"));//2
			
	}
}

Diagram: java33.1


Set
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are not allowed and order is not preserved.

Diagram: java33.2



HashSet
========
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it will hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable and Cloneable interface.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashSet hs=new HashSet();
		hs.add("one");
		hs.add("nine");
		hs.add("five");
		System.out.println(hs);//[nine, one, five]
		hs.add("one");
		System.out.println(hs);//[nine, one, five]
		hs.add(10);
		System.out.println(hs);//[nine, one, 10, five]
		hs.add(null);
		System.out.println(hs);//[null, nine, one, 10, five]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashSet<String> hs=new HashSet<String>();
		hs.add("one");
		hs.add("nine");
		hs.add("five");
		System.out.println(hs);//[nine, one, five]
		hs.add("one");
		System.out.println(hs);//[nine, one, five]
		hs.add(null);
		System.out.println(hs);//[null, nine, one, five]
	}
}

LinkedHashSet
===============
It is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

HashSet					LinkedHashSet
--------------				---------------
The underlying data structure is	The underlying data structure is  
Hashtable.				Hashtable and LinkedList.

Insertion order is not preserved.	Insertion order is preserved.

It is introduced in 1.2v.		It is introduced in 1.4v. 

ex:
---

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashSet<String> lhs=new LinkedHashSet<String>();
		lhs.add("one");
		lhs.add("nine");
		lhs.add("five");
		System.out.println(lhs);//[one,nine,five]
		lhs.add("one");
		System.out.println(lhs);//[one,nine,five]
		lhs.add(null);
		System.out.println(lhs);//[one,nine,five,null]
	}
}

TreeSet
========
The underlying data structure is BALANCED TREE.

Duplicate objects are not allowed.

Insertion order is not preserved because it will take sorting order of an object.

Hetrogeneous objects are not allowed otherwise we will get ClassCastException.

Null insertion is not possible otherwise we will get NullPointerException.

It implements NavigableSet, Serializable and Cloneable interface.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(7);
		ts.add(3);
		System.out.println(ts);//[1,3,5,7,10]
		ts.add(1);
		System.out.println(ts);//[1, 3, 5, 7, 10]
		
		//ts.add(null);
		//System.out.println(ts);//R.E NullPointerException 

		//ts.add("hi");
		//System.out.println(ts);// R.E .ClassCastException
	}
}

Q)What is the difference between Comparable and Comparator interface?


Comparable
-----------
It is an interface which is present in java.lang package.

It contains only one method i.e compareTo() method.

ex:
	obj1.compareTo(obj2)

	It will return -ve if obj1 comes before obj2.

	It will return +ve if obj1 comes after obj2.

	It will return 0 if both objects are same.

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("A".compareTo("Z")); //-25

		System.out.println("Z".compareTo("A")); // 25

		System.out.println("K".compareTo("K")); // 0
	}
}
Note:
------
If we depends upon default natural sorting order then we need to use
Comparable interface.

Comparator
-----------
It is an interface which is present in java.util package.

It contains following two methods i.e compare() and equals() method.

ex:
	public int compare(Object obj1,Object obj2)

		It will return +ve if obj1 comes before obj2.

		It will return -ve if obj1 comes after obj2.

		It will return 0 if both objects are same.

	public boolean equals(Object obj)

Implementation of compare() is mandatory.

Implementation of equals() method is optional because it will be available in our program through inheritance.


Note:
----
If we depends upon customized sorting order then we need to use Comparator interface.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(5);
		ts.add(1);
		ts.add(3);
		System.out.println(ts);//[10,5,3,1]
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else 
			return 0;
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(5);
		ts.add(1);
		ts.add(3);
		System.out.println(ts);//[1,3,5,10]
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else 
			return 0;
	}
}

Diagram: java33.3























































































































