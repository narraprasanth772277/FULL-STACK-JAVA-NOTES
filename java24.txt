Method overloading
===================
Having same method name with different parameters in a single class is called method overloading.

All the methods present in class are called overloaded methods.

Method overloading will reduce complexity of the programming.

ex:
---
class MeeSeva 
{
	//overloaded methods 
	public void search(int voterId)
	{
		System.out.println("Found By VoterId");
	}
	public void search(String houseNo)
	{
		System.out.println("Found By HouseNo");
	}
	public void search(long aadharNo)
	{
		System.out.println("Found AadharNo");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MeeSeva  ms=new MeeSeva();
		ms.search(1001);
		ms.search("1-4-6/4/1");
		ms.search(1234567l);
	}
}

Method overriding
==================
Having same method name with same parameters in a two different classes is called method overriding.

Methods present in parent class are called overridden methods.

Methods present in child class are called overriding methods.

ex:
---
class Parent
{
	public void property()
	{
		System.out.println("Cash+Gold+Land");
	}
	public void marry()
	{
		System.out.println("subhalakshmi");
	}
}
class Child extends Parent 
{
	public void marry()
	{
		System.out.println("Rashmika");
	}
}
class Test 
{
	public static void main(String[] args)
	{	
		Parent p=new Parent();
		p.property();//cash+gold+land
		p.marry();//subhalakshmi

		Child c=new Child();
		c.property();//cash+gold+land
		c.marry();// Rashmika

		Parent p1=new Child();
		p1.property();//cash+gold+land
		p1.marry();//Rashmika
	}
}

If we declare any methods as final then overriding of that methods is not possible.

ex:

class Parent
{
	public void property()
	{
		System.out.println("Cash+Gold+Land");
	}
	//overridden method
	public final void marry()
	{
		System.out.println("subhalakshmi");
	}
}
class Child extends Parent 
{
	//overriding method
	public void marry()
	{
		System.out.println("Rashmika");
	}
}
class Test 
{
	public static void main(String[] args)
	{	
		Parent p=new Parent();
		p.property();//cash+gold+land
		p.marry();//subhalakshmi

		Child c=new Child();
		c.property();//cash+gold+land
		c.marry();// Rashmika

		Parent p1=new Child();
		p1.property();//cash+gold+land
		p1.marry();//Rashmika
	}
}

Method Hiding
=============
Method hiding is exactly same as method overriding with following differences.

Method overriding 			Method hiding 
------------------			---------------
All the methods present in method	All the methods present in method  
overriding must be non-static.		hiding must be static.

Method resolution will taken care 	Method resolution will taken care 
by JVM based on runtime object.		by compiler based on reference type.

It is also known as dynamic 		IT is also known as static 
polymorhpism, runtime polymorphism or 	polymorphism, compiletime polymorphism
late binding.				or early binding.

ex:
----
class Parent
{
	public static void property()
	{
		System.out.println("Cash+Gold+Land");
	}
	public static void marry()
	{
		System.out.println("subhalakshmi");
	}
}
class Child extends Parent 
{
	public static void marry()
	{
		System.out.println("Rashmika");
	}
}
class Test 
{
	public static void main(String[] args)
	{	
		Parent p=new Parent();
		p.property();//cash+gold+land
		p.marry();//subhalakshmi

		Child c=new Child();
		c.property();//cash+gold+land
		c.marry();// Rashmika

		Parent p1=new Child();
		p1.property();//cash+gold+land
		p1.marry();//Subhalakshmi
	}
}

Interview Questions
===================
Q)Can we overload main method in java?

Yes, it is possible to overload main method in java.But JVM always execute main method with String[] parameter only.

ex:

class Test 
{
	public static void main(String[] args)
	{	
		System.out.println("string-arg method");
	}
	public static void main(int[] iargs)
	{	
		System.out.println("int-arg method");
	}
}

Q)Can we override main method in java?

No, we can't override main method in java because it is static.

Polymorphism
=============
Polymorphism has taken from Greek word.

Here poly means many and morphism means forms.

The ability to represent in different forms is called polymorphism.

The main objective of polymorphism is to provide flexibility.

Diagram: java24.1


In java, polymorhpism is divided into two types.

1)Compile time polymorphism / static polymorphism / early binding

2)Runtime polymorphism / dynamic polymorphism / late binding 

1)Compile time polymorphism
--------------------------
A polymorphism which exhibits at compile time is called compile time polymorphism.
ex:
	Method overloading 
	Method hiding 

2)Runtime polymorphism 
------------------------
A polymorphism which exhibits at run time is called run time polymorphism.
ex:
	Method overriding


Summary Diagram : java24.2


Constructor
=============
A constructor is a special method which is used to initialize an object.
ex:
	Test t=new Test();

Having same name as class name is called constructor.

A constructor does not allow any returntype.

A constructor will following modifiers.
ex:
	default
	public
	private 
	protected

Constructor will execute when we create an object.

In java , we have two types of constructors.

1)Userdefined constructor 

2)Default constructor 

1)Userdefined constructor 
--------------------------
A constructor which is created by the user based on the application requirement is called userdefined constructor.

It is classified into two types.

i)Zero-Argument constructor 

ii)Parameterized constructor 

i)Zero-Argument constructor 
----------------------------
Suppose if we are not passing any argument to userdefined constructor then such constructor is called zero-argument constructor.

ex:
---
class Test 
{
	//constructor
	Test()
	{
		System.out.println("0-arg const");
	}

	public static void main(String[] args)
	{	
		System.out.println("Main-Method");
	}

}

o/p:
	Main 

ex:2
------
class Test 
{
	//constructor
	public Test()
	{
		System.out.println("0-arg const");
	}

	public static void main(String[] args)
	{	
		Test t=new Test();
		System.out.println("Main-Method");
	}

}

ex:
----
class Test 
{
	//constructor
	private Test()
	{
		System.out.println("0-arg const");
	}

	public static void main(String[] args)
	{	
		Test t1=new Test();
		System.out.println("Main-Method");
		Test t2=new Test();
	}

}
o/p:
0-arg const
Main-Method
0-arg const


ex:
---
class Test 
{
	//constructor
	protected Test()
	{
		System.out.println("0-arg const");
	}

	public static void main(String[] args)
	{	
		Test t1=new Test();
		System.out.println("Main-Method");
		Test t2=new Test();
	}

}
o/p:
0-arg const
Main-Method
0-arg const



ii)Parameterized constructor 
---------------------------
Suppose if we are passing atleast one argument to userdefined constructor then such constructor is called parameterized constructor.

ex:

class Employee
{
	//instance variable
	//current class variables 
	private int empId;
	private String empName;
	private double empSal;

	//parameterized constructor 
	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	public void getEmployeeDetails()
	{
		System.out.println("Employee Id :"+empId);
		System.out.println("Employee Name :"+empName);
		System.out.println("Employee Salary :"+empSal);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Employee e=new Employee(101,"Alan Morries",1000d);
		e.getEmployeeDetails();
	}
}


2)Default constructor 
---------------------
It is a compiler generated constructor for every java program where we are not defining atleast zero argument constructor.

A default constructor is a empty implementation.

To see the default constructor we will use below command.
ex:
	javap  -c  Test 

Diagram: java24.3


Constructor overloading
=========================
Having same constructor name with different parameters in a single class is called constructor overloading.

ex:

class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}













































































































