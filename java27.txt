java.lang.Enum 
===============
Power to enum will be inherited from java.lang.Enum class.

It contains following two methods.

1)values()
---------
	It will return group of constants from enum.

2)ordinal() 
----------
	It will return ordinal number.

ex:
---
enum  Week
{
	MON,TUE,WED,THU,FRI,SAT,SUN 
}

class Test  
{
	public static void main(String[] args) 
	{
			Week[] w=Week.values();	

			//for each loop
			for(Week w1:w)
			{
			System.out.println(w1+"==========="+w1.ordinal());
			}
			
	}
}

When compare to old language enum, java enum is more powerful because in addition to constants we can declare variables, methods and constructors.

ex:
---
enum Cloths 
{
	SILK,COTTON,KHADI;

	Cloths()
	{
		System.out.println("constructor");
	}
}

class Test  
{
	public static void main(String[] args) 
	{
			Cloths c=Cloths.SILK;
			
	}
}

ex:
---
enum Cloths 
{
	SILK,COTTON,KHADI;

	static int i=100;

	public static void main(String[] args) 
	{
			System.out.println(i);
	}
}

Wrapper classes
===============
The main objective of wrapper classes are.

1) To wrap primitive to wrapper object and vice versa.

2) To defined several utility methods.

primitive type				wrapper class
---------------				---------------
byte					Byte	
short					Short
int					Integer
long					Long
float					Float
double					Double
boolean					Boolean 
char 					Character 

constructor
------------
Every wrapper class contains following two constructors . One will take corresponding primitive as an argument and another will take corresponding String as an argument.

Wrapper class				constructor
--------------				-------------
Byte					byte or String 
Short					short or String 
Integer					int or String
Long					long or String
Float					float or String
Double					double or String
Boolean					boolean or String 
Character				char 


ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		Integer i1=new Integer(10);

		Integer i2=new Integer("20");

		System.out.println(i1+" "+i2);
	}
}

ex:2
-----
class Test  
{
	public static void main(String[] args) 
	{
		Boolean b1=new Boolean(true);

		Boolean b2=new Boolean("false");

		System.out.println(b1+" "+b2);//true   false 
	}
}

ex:3
----
class Test  
{
	public static void main(String[] args) 
	{
		Character c=new Character('a');
		System.out.println(c);
	}
}

Utility methods
===============
We have following utility methods.

1) valueOf() 
-------------
It is similar to constructor.

It will convert primitive type to wrapper object.

ex:
		
class Test  
{
	public static void main(String[] args) 
	{
		Integer i1=Integer.valueOf(10);

		Integer i2=Integer.valueOf("20");

		System.out.println(i1+" "+i2);
	}
}

	

2) xxxValue()
--------------
It is used to convert wrapper object to primitive type.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		Integer i=new Integer(10);
		
		byte b=i.byteValue();
		System.out.println(b); 

		short s=i.shortValue();
		System.out.println(s);
		
	}
}


3) parseXxx() 
--------------
It will convert string to primitive type.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		String str="56";

		int i=Integer.parseInt(str);

		long l=Long.parseLong(str);

		float f=Float.parseFloat(str);

		System.out.println(i+" "+l+" "+f);//56 56 56.0
		
	}
}

4) toString() 
--------------
It will convert Wrapper object to String type.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		Integer i1=new Integer(100);

		String str=i1.toString();
		
		System.out.println(str);//100
	}
}

Interview Program
=================
Q)Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first binary number :");
		String binary1=sc.next(); // 1010

		System.out.println("Enter the second binary number :");
		String binary2=sc.next(); // 0101

		//convert binary to decimal
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);

		//logic
		int c=a+b;

		//convert decimal to binary 
		String result=Integer.toBinaryString(c);

		System.out.println(result);
	}
}

Q) Types of objects in java ? 

We have two types of objects in java.

1)Immutable object 

2)Mutable object 

1)Immutable object 
--------------------
After object creation if we perform any changes then for every change a new object will be created such type of object is called immutable object.
ex:
	String 
	Wrapper classes 


2)Mutable object
---------------
After object creation if we perform any changes then all the changes will be reflected to single object only such type of object is called mutable object.
ex:
	StringBuffer 
	StringBuilder 

String
=======
A String is a collection of characters which is enclosed in a double quotation.

case1:
------
After object creation we can't perform any changes.If we perform any changes then for every change a new object will be created such behaviour is called immutability of an object.

Diagram: java27.1


case2:
-------
What is the difference between == and .equals() method?

==
----
It is a equality operator which always return boolean value.

It is used for reference or address comparision.

ex:
---

class Test  
{
	public static void main(String[] args) 
	{			
		String s1=new String("bhaskar");
		String s2=new String("bhaskar");
		System.out.println(s1==s2);
	}
}

.equals()
---------
It is a method present String class which always returns boolean value.

It is used for content comparision and it is case sensitive.

ex:


class Test  
{
	public static void main(String[] args) 
	{			
		String s1=new String("bhaskar");
		String s2=new String("bhaskar");
		System.out.println(s1.equals(s2));//true 
	}
}

case3:
-----
Once if we create a String object.Two objects will be created one is on heap and another is on SCP (String Constant Pool) area.But 's' always points to heap area only.
ex:
	String s=new String("bhaskar");

Diagram: java27.2

Object creation in SCP area is always optional. First JVM will check is there any object is created with same content or not.If already created then it simply refers to that object.If it is not created then JVM will create a new object.Hence there is no chance of having duplicate objects in SCP area.

Even though SCP objects do not have any reference , garbage collector can't access them.

SCP objects will destroy when JVM shutdowns or terminated.

Diagram: java27.3

Interning of String object
==========================
With the help of heap object reference if we need corresponding SCP object reference then we need to use intern() method.

Diagram: java27.4


String important methods
========================
class Test  
{
	public static void main(String[] args) 
	{			
		String str="bhaskar";
		
		System.out.println(str.length()); // 7

		System.out.println(str.charAt(3)); // s

		System.out.println(str.toUpperCase());// BHASKAR 

		System.out.println(str.toLowerCase());// bhaskar

		System.out.println(str.concat("solution")); //bhaskarsolution

		System.out.println(str.replaceAll("a","A")); //bhAskAr

		System.out.println(str.indexOf("a")); //2

		System.out.println(str.lastIndexOf("a")); //5

		System.out.println(str.equals("BHASKAR")); //false 

		System.out.println(str.equalsIgnoreCase("BHASKAR")); // true 
		

	}
}








































































































	




























































