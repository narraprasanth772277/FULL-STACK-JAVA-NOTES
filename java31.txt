Exception Handling
===================
Q)What is the difference between Exception and Error?

Exception
---------
Exception is a problem for which we can provide solution programmatically.

Exception will occur due to syntax error.

ex:
	ArithmeticException 
	IllegalArgumentException
	FileNotFoundException 	

Error
------
Error is a problem for which we can't provide solution programmatically.

Erorr will occur due to lack of system resources.

ex:
	OutOfMemory
	StackOverFlow 	
	LinkageError

As a part of java application development , it is a responsibility of a programmer to provide smooth termination for every java program.

We have two types of terminations.

1)Smooth termination / Graceful termination
------------------------------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination. 

2)Abnormal termination 
-------------------
During the program execution suppose if we are getting any interruption in the middle of the program such type of termination is called abnormal termination. 


Whenever exception raised in our program then we must and should handle the exception otherwise our program will terminates abnormally.

Here exception will display name of the exception,description of the exception and line number of the exception.

Exception
===========
It is a unwanted, unexpected event which disturbs normal flow of our program.

Exception always raised at runtime so they are also known as runtime events.

The main objective of exception handling is to provide graceful termination.

In java, exceptions are divided into two types.

1)Predefined exceptions

2)Userdefined exceptions 

1)Predefined exceptions
-------------------------
Built-In exceptions are called predefined exceptions.

It is divided into two types.

i)Checked exceptions 

ii)Unchecked exceptions 

i)Checked exceptions 
-------------------
Exceptions which are checked by the compiler at the time of compilation is called checked exceptions.
ex:
	InterruptedException
	FileNotFoundException
	EOFException 
	and etc.

ii)Unchecked exceptions 
---------------------
Exceptions which are checked by the JVM at the time of runtime is called runtime exceptions.
ex:
	ArithmeticException
	IllegalArgumentException
	ClassCastException 
	and etc

Diagram: java31.1

If any checked exception raised in our program then we must and should handle that exception by using try and catch block.

try block
==========
It is a block which contains risky code.

It is always associate with catch block.

It is used to throw the exception to catch block.

If any exception raised in try block then try block won't be executed.

If any exception raised in the middel of the program then rest of the code won't be executed.

catch Block
==========
It is a block which contains error handling code.

A catch block always associate with try block.

A catch block is used to catch the exception which is thrown by try block.

A catch block will take exception class name as a parameter and that name must match with exception class name.

If there is no exception in try block then catch block won't be executed.


syntax:
------
	try
	{
		-
		- //risky code 
		-
	}
	catch(ArithmeticException ae)
	{
		-
		- //error handling code 
		-
	}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	catch-block

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	stmt1
	catch-block


A try with multiple catch blocks
==================================
A try block can have multiple catch blocks.

If a try block contains multiple catch blocks then order of catch block is 
very important, it should be from child to parent but not from parent to child.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RE");
		}
		catch(Exception e)
		{
			System.out.println("From E");
		}
	}
}

Various ways to provide exception details
=========================================
Throwable class defines following three methods to display exception details.

1) printStackTrace()
-----------------
It will display name of the exception ,description of the exception and line number of the exception.

2) toString()
------------
It will display name of the exception and description of the exception.

3) getMessage() 
---------------
It will give description of the exception.

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			ae.printStackTrace();

			System.out.println("=================");

			System.out.println(ae.toString());

			System.out.println("=================");

			System.out.println(ae.getMessage());
		}
		
	}
}

finally block
============
It is never recommanded to maintain cleanup code in try block because if we get any exception then try block won't be executed.

It is never recommanded to maintain cleanup code in catch block because if there is not exception in try block then catch block won't be executed.

We need a place where we can maintain cleanup code and it should execute irrespective of exception raised or not.Such block is called finally block.

syntax:
------
	try
	{
		-
		- //risky code 
		-
	}
	catch(ArithmeticException ae)
	{
		-
		- //error handling code 
		-
	}
	finally
	{
		-
		- //cleanup code 
		-
	}

ex:1
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
		
	}
}
o/p:
	try-block
	finally-block

ex:2
-----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
		
	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:7)
	finally-block

A try with finally combination is valid in java.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
		
	}
}
o/p:
	try-block
	finally-block

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args) 
	{
		FileWriter fw=null;

		try
		{
			fw=new FileWriter("abc.txt");	
			fw.write(98);//b
			fw.write("\n");
			char[] ch={'a','b','c'};
			fw.write(ch);
			fw.write("\n");
			fw.write("bhaskar");
			fw.flush();
			System.out.println("Please check the location");
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
		finally
		{
			try
			{
				fw.close();
			}
			catch (IOException ioe)
			{
				ioe.printStackTrace();
			}
		}
				
	}
}



Q)How can we handle multiple exceptions in a single catch block?

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException | ClassCastException | IllegalArgumentException  e)
		{
			e.printStackTrace();
		}
		
	}
}

Q)What is the difference between final, finally and finalized method?

final
-----
A final is a modifier which is applicable for variables , methods and classes.

If we declare any variable as final then reassignment of that variable is not possible.

If we declare any method as final then overriding of that method is not possible.

If we declare any class as final then creating child class is not possible.

finally 
--------
It is a block which contains cleanup code and it should execute irrespective of exception raised or not.

finalized
-----------
It is a method called by garbage collector just before destroying an object for cleanup activity.

throw statement
================
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithemticException("Don't divided by zero");

ex:

class Test  
{
	public static void main(String[] args) 
	{
		throw new ArithmeticException("Don't divide by zeroooo");	
	}
}

throws statement
================
If any checked exception raised in our program then we must and should handle that exception by using try and catch block or by using throws statement.

ex:1
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(5000);
			System.out.println("Welcome to Java Class");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
		
	}
}

ex:2
----
class Test  
{
	public static void main(String[] args)throws InterruptedException 
	{

			Thread.sleep(5000);
			System.out.println("Welcome to Java Class");
	}
}























































































































































	






















































