Converting decimal to binary number
===================================

Decimal number : 10

Binary number  : 1010

	2|10
	 ---- 0
	2|5
	 ---- 1
	2|2		^
	 ---- 0 	|
	  1		|
	-----------------
	1010


Converting binary to decimal number
==================================
Binary number : 0101

Decimal number : 5 

	0101
	    <----
	1*1 + 0*2 + 1*4 + 0*8 

	1 + 0 + 4 + 0 = 5	
		

4)Bitwise Operators
====================

Bitwise AND operator (&)
------------------------
Bitwise AND operator deals with binary numbers.

Truth table
------------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c= a & b;
		System.out.println(c);//10
	}
}
/*
		10 - 1010
		11 - 1111
		----------
		&  - 1010
				  <----
		0*1 + 1*2 + 0*4 + 1*8
		
		0 + 2 + 0 + 8 =10	

*/

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int a=2,b=3;
		int c= a & b;
		System.out.println(c);//2
	}
}
/*
		2 - 0010 
		3 - 0011
		--------
        & - 0010 
				 <----
		0*1 +  1*2 + 0*4  + 0*8
		
		0 + 2 + 0 + 0 = 2
*/

Bitwise OR operator(|)
------------------------
Bitwise OR operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c= a | b;
		System.out.println(c);// 15
	}
}
/*
		10 - 1010
		15 - 1111
		-----------
		|  - 1111
				  <---
		1*1 + 1*2 + 1*4 + 1*8

		1 + 2 + 4 + 8 = 15
*/



Bitwise XOR operator (^)
--------------------------
Bitwise XOR operator deals with binary numbers.

Truth table
----------
T	T	= F
T	F	= T
F	T	= T
F	F	= F  

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int a=10,b=15;
		int c= a ^ b;
		System.out.println(c);// 5
	}
}
/*
		10 - 1010
		15 - 1111
		-----------
		^  - 0101
				  <----
		1*1 + 0*2 + 1*4 + 0*8

		1 + 0 + 4 + 0  = 5


*/

Bitwise NOT operator (~)
--------------------------
class  Test
{
	public static void main(String[] args) 
	{
		int i=~10;

		System.out.println(i); // -11 
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=~23;

		System.out.println(i); // -24
	}
}


ex:
-----
class  Test
{
	public static void main(String[] args) 
	{
		int i=~(-9);

		System.out.println(i); // 8
	}
}

5)Relational operators 
----------------------
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); //false 

		System.out.println(10 < 20); //true 

		System.out.println(2 <= 10); //true 

		System.out.println(10 >= 10); //true
		
		System.out.println(10 == 10); //true 

		System.out.println(10 == 20); //false
		
		System.out.println(10 != 10); //false 

		System.out.println(10 != 20); //true 


	}
}

Right Shift operators (>>)
---------------------------
10 >> 1 = 10/2 

10 >> 2 = 10/4

10 >> 3 = 10/8

10 >> 4 = 10/16

10 >> 5 = 10/32

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=20 >> 3;

		System.out.println(i); // 20 / 8 = 2
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10 >> 5;

		System.out.println(i); // 10 / 32 = 0
	}
}

Left Shift operators (<<)
---------------------------
10 << 1 = 10*2 

10 << 2 = 10*4

10 << 3 = 10*8

10 << 4 = 10*16

10 << 5 = 10*32

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10 << 4;

		System.out.println(i); // 10 * 16 = 160
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=100 << 5;

		System.out.println(i); // 100 * 32 = 3200
	}
}

6)Arithmetic operators
=======================
% - modules 
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10+5%10+6/2+9*2+6-4;

		System.out.println(i);
	}
}
/*
	10  +  5%10  +  6/2  +  9*2  +  6-4

	10  +  5     +  3    +  18   +   2 

	38
 */

Increment/Decrement operators(++/--)
=====================================
We have two types of increment operators.

i)Pre-increment 
	ex:
		++i;

2)post-increment 
	ex:
		i++;

We have two types of decrement operators.

i)Pre-decrement
	ex:
		--i;

ii)Post-decrement 
	ex:
		i--;

Post increment/decrement 
-------------------------
Rule 1 :  First Take 
Rule 2 :  Then Change

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		i++;

		System.out.println(i);//11
	}
}
 
ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(i++);//10
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++;

		System.out.println(i+" "+j);//11   10
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i++ + i--; //10 + 11

		System.out.println(i+" "+j);//10 21
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=i-- + i--; // 10 + 9 

		System.out.println(i+" "+j);//8 19
	}
}

Pre increment/decrement 
-------------------------
Rule 1 :  First Change 
Rule 2 :  Then Take

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		++i;

		System.out.println(i);//11
	}
}
ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		
		System.out.println(++i);//11
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i;
		
		System.out.println(i+" "+j);//11  11
	}
}

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=++i + --i; // 11 10
		
		System.out.println(i+" "+j);// 10  21
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		int j=--i + --i + --i; // 9 + 8 + 7
		
		System.out.println(i+" "+j);//7 24
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;
		
		System.out.println(i++ + ++i);//10 + 12
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=100;

		100++;

		System.out.println(i);//C.T.E 
	}
}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		int i=10;

		System.out.println(++(i++));//C.T.E 
	}
}


Control statements
====================
Control statement enables the programmer to control flow of our program.

Control statement allows us to make decisions, to jump from one section of code to another section and to execute the code repeatedly.

In java, we have four control statements.

1) Decision making statement 

2) Selection statement 

3) Iteration statement 

4) Jump statement 

1) Decision making statement 
--------------------------
It is used to create conditions in our programs.

Decision making statement is possible by using following ways.

i) if stmt 

ii) if else stmt 

iii) if else if ladder 

iv) nested if stmt 

i) if stmt 
-----------
It will execute the source code only if our condition is true.

syntax:
	if(condition)
	{
		-
		- //code to be execute 
		-
	}

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(5>1)
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt2
	stmt3

ex:
---
class  Test
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		if(10 == 20)
		{
			System.out.println("stmt2");
		}
		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt3

ex:
----
class  Test
{
	public static void main(String[] args) 
	{
		if((5>2) && (6<1))
			System.out.println("stmt1");
			System.out.println("stmt2");
			System.out.println("stmt3");
	}
}

Q)Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class  Test
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the First number :");
		int a=sc.nextInt();
		
		System.out.println("Enter the Second number :");
		int b=sc.nextInt();

		if(a>b)
			System.out.println(a+" is greatest");

		if(b>a)
			System.out.println(b+" is greatest");

	}
}

Q)Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class  Test
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the First number :");
		int a=sc.nextInt();
		
		System.out.println("Enter the Second number :");
		int b=sc.nextInt();

		System.out.println("Enter the Third number :");
		int c=sc.nextInt();

		if((a>b) && (a>c))
			System.out.println(a+" is greatest");

		if((b>a) && (b>c))
			System.out.println(b+" is greatest");

		if((c>a) && (c>b))
			System.out.println(c+" is greatest");

	}
}































































































































































































































































































































