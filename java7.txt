Datatypes
=========
Datatype describes what type of value we want to store inside a variable.

Datatype also tells how much memory has to be created for a variable.

In java, we have two types of datatypes.

Diagram: java7.1

byte
------
It is smallest datatype in java.

Size:  1 byte (8 bits)

Range: -128 to 127 (-2^7 to 2^7-1)

ex:
	1) byte b=10;
	   System.out.println(b); // 10

	2) byte b=130;
	   System.out.println(b); // C.T.E 

	3) byte b=10.5;
	   System.out.println(b); // C.T.E 
	


short
-------
It is a rarely used datatype in java.

Size: 2 bytes (16 bits)

Range: -32768 to 32767 (-2^15 to 2^15-1)

ex:
	1) byte b=20;
	   short s=b;
	   System.out.println(s); // 20 

	2) short s="hi";
           System.out.println(s); // C.T.E 

	3) short s=true;
   	   System.out.println(s); // C.T.E 


int
-----
It is mostly used datatype in java.

Size: 4 bytes (32 bits)

Range: -2147483648 to 2147483647 (-2^31 to 2^31-1)

ex:
	1) int i="false";
           System.out.println(i); // C.T.E 

	2) int i=10.5;
           System.out.println(i); // C.T.E 

	3) int i=true;
	   System.out.println(i); // C.T.E 

	4) int i='a';
	   System.out.println(i); // 97

Note:
-----
In java , for every character we have Universal Unicode value.
ex:
	a ---  97  
	A ---  65 

long
-----
If int datatype is not enough to hold large value then we need to use long datatype.

Size: 8 bytes (64 bits)

Range : (-2^63 to 2^63-1)

ex:
	1) long l="A";
	   System.out.println(l); // C.T.E 	

	2) long l='A';
           System.out.println(l); // 65 

	3) long l=10.5;
	   System.out.println(l); // C.T.E 

	4) long l=true;
           System.out.println(l); // C.T.E 

Q)Difference between float and double?

float					double
----------				---------
If we want 4 to 6 decimal point of 	If we want 14 to 16 decimal point of 
accuracy then we need to use float.	accuracy then we need to use double.

Size : 4 bytes (32 bits)		Size : 8 bytes (64 bits)

Range: -3.4e38 to 3.4e38 		Range: -1.7e308 to 1.7e308

To declare a float value we need to 	To declare a double value we need to 
suffix with 'f'.			suffix with 'd'.
ex:					ex:
	10.5f					10.5d

ex:
----
	1) float f=10.5f;
	   System.out.println(f); // 10.5

	2) float f=10;
	   System.out.println(f); // 10.0

	3) float f='a';
           System.out.println(f); // 97.0 

	4) float f="hi";
	   System.out.println(f); // C.T.E 

	5) float f=true;
           System.out.println(f); // C.T.E 

boolean
-------
A boolean datatype is used to represent boolean values either true or false.

Size : (Not Applicable)

Range : (Not Applicable)

ex:
	1) boolean b=TRUE;
	   System.out.println(b); // C.T.E 

	2) boolean b="false";
	   System.out.println(b); // C.T.E 

	3) boolean b=true;
	   System.out.println(b); //true 

char
------
It is a single character which is enclosed in a single quotation.

Size : 2 bytes (16 bits)

Range : 0 to 65535 

ex:
	1) char ch='a';
           System.out.println(ch); //a 

	2) char ch='ab';
           System.out.println(ch); //C.T.E

	3) char ch="a";
           System.out.println(ch); // C.T.E  

Diagram: java7.2


Interview Questions
==================
Q) Is java purely object oriented or not?

No, Java will not consider as purely object oriented programming language because java does not support many OOPS concepts like multiple inheritance, operator overloading and more ever we depends upon primitive datatypes which are non-objects.


Types of variables
===================
A name which is given to a memory location is called variable.

Purpose of variable is used to store the data.

In java variables are divided into two types.

1)Primitive variables
--------------------
	It is used to represent primitive values.

2)Reference variables 
-----------------
	It is used to represent object reference.
	ex:
		Employee e=new Employee();
			 |
			reference variable 

Based on the position and execution these variables are divided into three types.

1)Instance variables  / Non-static variables 

2)Static variables  / Global variables 

3)Local variables / Temperory variables / Automatic variables 


1)Instance variables 
-----------------------
A value of a variable which is varied from object to object is called instance variable.

Instance variable will be created at the time of object creation and it will destroy at the time of object desctructions.Hence scope of instance variable is same as scope of an object.

Instance variable will store in heap area as a part of an object.

Instance variable must and should declare immediately after the class but not inside methods ,blocks and constructors.

Instance variable can access directly from instance area but we can't access directly from static area.

To access instance variable from static area we need to create object reference.

ex:1
----
class Test
{
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);//C.T.E  
	}
}

ex:2
-----
class Test
{  
	//instance variable
	int i=10;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);//10
	}
}

Note:
-----
If we won't initialize any value to instance variable then JVM will initialized default value.

ex:3
-----
class Test
{
	//instance variable
	boolean b;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.b);//false 
	}
}

ex:4
----
class Test
{
	public static void main(String[] args)
	{
		//calling
		Test t=new Test();
		t.m1();
	}
	//non-static method 
	public void m1()
	{
		System.out.println("instance-method");
	}
}








































































































				

	

























































