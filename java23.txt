Q)Java program to convert octa to decimal?


class Test 
{
	public static void main(String[] args)
	{
		int i=45;

		int j=045; //octa value 

		System.out.println(i); // 45

		System.out.println(j); // 37 

		//convert octa to decimal 
		System.out.println(Integer.parseInt("46",8)); //38
	}
}

Is-A relationship
=================
Is-A relationship is also known as inheritance.

Using "extends" keyword we can implements Is-A relationship.

The main objective of Is-A relationship is to provide reusability.

ex:
---
class Parent 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Child extends Parent
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Parent p=new Parent();
		p.m1();

		Child c=new Child();
		c.m1();
		c.m2();

		Parent p1=new Child();
		p1.m1();

		//Child c1=new Parent(); // C.T.E parent can't convert to child
	}
}

conclusion
-----------
Whatever the properties are there with parent it comes to child but child properties will never go backs to parent.

A parent reference can hold child object but child reference can't hold parent object.

inheritance
============
Inheritance is a mechanism where we will derive class in the present of existing class.

or

Inheritance is a mechanism where one class will inherit the properties of another class.

Inheritance deals with reusability.

We have five types of inheritance.

1) Single Level inheritance 

2) Multilevel inheritance 

3) Multiple inheritance 

4) Hierarchical inheritance 

5) Hybrid inheritance 

1) Single Level inheritance 
---------------------------
If we derived a class in the presence of one base class is called single level inheritance.

Diagram:
		A (Parent/Base/Super class)
		|
		|
		|
		B (Child/Derived/sub class)

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1 method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2 method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();
	}
}

2) Multilevel inheritance 
-------------------------
If we derived a class in the presence of one base class and that class is derived from another base class is called multilevel inheritance. 

Diagram:
		A
		|
		|
		B
		|
		|
		C
ex:
 
class A 
{
	public void m1()
	{
		System.out.println("M1 method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2 method");
	}
}
class C extends B
{
	public void m3()
	{
		System.out.println("M3 method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();

		C c=new C();
		c.m1();
		c.m2();
		c.m3();
	}
}




3) Multiple inheritance 
------------------------
In java, we can't extends more then one class simultenously because java does not support multiple inheritance.
ex:
	class A {}
	class B {}
	class C extends A,B  --> invalid 
	{	
	}
	
But interface can extends more then one interface so we can achive multiple inheritance concept through interfaces.
ex:
	interface A {}
	interface B {}
	interface C extends A,B  --> valid 
	{}

If our class does not extends any other class then it is a direct child class of Object class.
ex:			Diag:
	class A 		Object
	{			|
	}			|
				A 

If our class extends some other class then it is a indirect child class of Object class.
ex:				Diag:
	class A 			Object
	{				|
	}				|
	class B extends A  		A 
	{				|
	}				|
					B 

Java does not support cyclic inheritance.
ex:
	class A extends B 
	{
	}
	class B extends A 
	{
	}


Q)Why java does not support multiple inheritance?

There is a chance of raising ambiguity problem that's why java does not support multiple inheritance.

ex:
	
	p1.m1()				p2.m1()

	  |--------------------------------|		
                         |
			c.m1()


4) Hierarchical inheritance 
---------------------------
If we derived multiple classes in the presence of one base class is called hierachical inheritance.

Diagram:
				A 
				|
	|-----------------------------------------------|
	B						C

ex:

class A 
{
	public void m1()
	{
		System.out.println("M1 method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2 method");
	}
}
class C extends A
{
	public void m3()
	{
		System.out.println("M3 method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();

		B b=new B();
		b.m1();
		b.m2();

		C c=new C();
		c.m1();
		c.m3();
	}
}

5) Hybrid inheritance
----------------------
Hybrid inheritance is a combination of more then one inheritance.

Java does not support hybrid inheritance.


Diagram:
				A 
				|
	|-----------------------------------------------|
	B						C
	|-----------------------------------------------|
				|
				D 
			
Has-A relationship
===================
Has-A relationship is also known as composition and aggregation.

There is no specific keyword to implements Has-A relationship but mostly
we will use new operator.

The main objective of Has-A relationship is to provide reusability.

Has-A relationship will increase dependency between two components.

ex:
	class Engine 
	{
		-
		- //engine specific functionality 
		-	
	}
	class Car 
	{
		Engine e=new Engine();
		-	
	}


ex:
---
class Ihub 
{
	public String courseName()
	{
		return "Full Stack Java With AWS";
	}
	public double courseFee()
	{
		return 30000d;
	}
	public  String trainerName()
	{
		return "Niyaz Sir";
	}
	public int courseDuration()
	{
		return 120;
	}
}
class Usha
{
	public void getCourseDetails()
	{
		Ihub i=new Ihub();
		System.out.println("Course Name :"+i.courseName());
		System.out.println("Course Fee :"+i.courseFee());
		System.out.println("Trainer Name :"+i.trainerName());
	}
}
class Student
{
	public static void main(String[] args)
	{
		Usha u=new Usha();
		u.getCourseDetails();
	}
}

composition
-----------
Without existing container object there is no chance of having contained object then the relationship between container and contained object is called composition which is strongly association.

Diagram: java23.1

aggregation 
------------
Without existing container object there is a chance of having contained object then the relationship between container and contained object is called aggreation  which is loosely association.

Diagram: java23.2





































 

























































